---
title: "Analysis"
format: html
editor: visual
---

```{r, warning=FALSE, message=FALSE}
pacman::p_load(tidyverse, psych, skimr, here, gmodels, doSPSS, car, effectsize, boot, ez, patchwork, apaTables)
Theme <- theme(
        axis.text.x    = element_text(size = 20)
        , axis.text.y  = element_text(size = 20)
        , axis.title.x = element_text(size = 20)
        , axis.title.y = element_text(size = 20)
        , legend.text  = element_text(size = 23)
        , legend.title = element_text(size = 25)
        , title        = element_text(size = 20)
        )
```


```{r, warning=FALSE, message=FALSE}
Data_3 <- readRDS(here("Data//Data_3.rds")) %>% 
    mutate(
      doc_minus_lay_meti = if_else(grepl('up', full_condition)
                                    , METI_1 - METI_2
                                    , METI_2 - METI_1)
       , doc_minus_lay_expertise = if_else(grepl('up', full_condition)
                                           , Expertise_1 - Expertise_2
                                           , Expertise_2 - Expertise_1)
       , doc_minus_lay_integrity = if_else(grepl('up', full_condition)
                                           , Integrity_1 - Integrity_2
                                           , Integrity_2 - Integrity_1)
       , doc_minus_lay_benevolence = if_else(grepl('up', full_condition)
                                             , Benevolance_1 - Benevolance_2
                                             , Benevolance_2 - Benevolance_1))      

Data_3 <- Data_3 %>% 
  mutate(
    who_IDK = if_else(grepl('DK', full_condition) == TRUE, 'Dr', 'Lay')
    , position_IDK = case_when(
        grepl('DKup', full_condition) == TRUE |
        grepl('Knowdown', full_condition) == TRUE |
        grepl('KnowDown', full_condition) == TRUE ~ 'First'
        , T ~ 'Second'
      )
    ) %>% 
      
      
  mutate (
          idk_minus_know_meti =  if_else(position_IDK == 'First'
                                         , METI_1 - METI_2
                                         , METI_2 - METI_1)
         
         , idk_minus_know_Expertise =  if_else(position_IDK == 'First'
                                               , Expertise_1 - Expertise_2
                                               , Expertise_2 - Expertise_1)
         
         , idk_minus_know_Integrity =  if_else(position_IDK == 'First'
                                               , Integrity_1 - Integrity_2
                                               , Integrity_2 - Integrity_1)
         
         , idk_minus_know_Benevolance =  if_else(position_IDK == 'First'
                                                 , Benevolance_1 - Benevolance_2
                                                 , Benevolance_2 - Benevolance_1)
  )
```


```{r}
long_data <- function(dv_1, dv_2){
  
  First_meti <- Data_3 %>% 
  select(Q1, full_condition, measure = {{dv_1}}, Dr_answer, Dr_position, Complaience) %>% 
  mutate(who_first = if_else(grepl('up', full_condition), 'Dr', 'Lay')
         , answer_first = if_else((grepl('DK', full_condition) & grepl('up', full_condition)) |
                                  (grepl('Know', full_condition) & grepl('down', full_condition)) |
                                    (grepl('Know', full_condition) & grepl('Down', full_condition)), 'IDK', 'Know')
         , measure_time = 'First') %>% 
  mutate(doc_lay = who_first
         , Answer = answer_first)

Second_meti <- Data_3 %>% 
  select(Q1, full_condition, measure = {{dv_2}}, Dr_answer, Dr_position, Complaience) %>% 
  mutate(who_first = if_else(grepl('up', full_condition), 'Dr', 'Lay')
         , answer_first = if_else((grepl('DK', full_condition) & grepl('up', full_condition)) |
                                  (grepl('Know', full_condition) & grepl('down', full_condition)) |
                                    (grepl('Know', full_condition) & grepl('Down', full_condition)), 'IDK', 'Know')
         , measure_time = 'Second') %>% 
  mutate(doc_lay = if_else(who_first == 'Dr', 'Lay', 'Dr')
         , Answer = if_else(answer_first == 'IDK', 'Know', 'IDK'))


full_meti <- rbind(First_meti, Second_meti) %>% 
   mutate(group = case_when(
            grepl(x = full_condition, pattern = 'DKdown') == TRUE ~ 'doc_DK_second'
          , grepl(x = full_condition, pattern = c('KnowDown')) == TRUE ~ 'doc_know_second'
          , grepl(x = full_condition, pattern = c( 'Knowdown'))  == TRUE ~ 'doc_know_second'
          , grepl(x = full_condition, pattern = 'Knowup')  == TRUE ~ 'doc_know_first'
          , grepl(x = full_condition, pattern = 'DKup')  == TRUE ~ 'doc_DK_first'
            )
          ) %>% 
  mutate(Dr_answer = as_factor(Dr_answer)
         , Dr_position = as_factor(Dr_position)
         , doc_lay = as_factor(doc_lay)) 
  
  contrasts(full_meti$Dr_answer)[1]   <- -1
  contrasts(full_meti$Dr_position)[1] <- -1
  contrasts(full_meti$doc_lay)[1]     <- -1

  return(full_meti)
  
}
```


# Two way analyses

```{r, warning=FALSE, message=FALSE}
two_way_analysis_order <- function(data, order, title){

  if (order == 1){

    new_data <- data %>%
      filter(measure_time == 'First') %>%
      select(doc_lay, Answer, measure, Q1) %>%
      mutate(dv_post = paste0(doc_lay, '_', Answer))

  } else {

      new_data <- data %>%
        filter(measure_time == 'Second') %>%
        select(doc_lay, Answer, measure, Q1) %>%
        mutate(dv_post = paste0(doc_lay, '_', Answer))

  }


  sum <- new_data %>%
    group_by(doc_lay, Answer) %>%
    summarise(round(mean_cl_normal(measure), 2)
              , N = length(measure))

  meti_1 <- ezANOVA(new_data
                    , wid     = Q1
                    , between = .(Answer, doc_lay)
                    , dv      = measure
                    , type    = 3
                    , white.adjust = FALSE)

  post <- pairwise.t.test(new_data$measure, new_data$dv_post, p.adjust.method = 'bonferroni')

  fig <- new_data %>%
    mutate(doc_lay = if_else(doc_lay == 'Lay', 'Layperson', 'Physician')
           , Answer = if_else(Answer == 'IDK', 'IDK', 'Specific advice')
           , `Reply type` = Answer) %>%
    ggplot(aes(x = doc_lay, y = measure, fill = `Reply type`)) +
    stat_summary(fun = mean, geom = "bar",  position = position_dodge(0.9), alpha = 0.8) +
    geom_point(aes(color = `Reply type`)
               , size = 1
               , position = position_jitterdodge(jitter.width = 0.2
                                                 , jitter.height = 0)
               , alpha = 0.2
               ) + 
     stat_summary(fun.data = "mean_cl_normal", geom = "errorbar"
                , color = "black", width = 0.4
                , linewidth = 2, position = position_dodge(0.9)
                ) +
    scale_fill_manual(values =  c("grey30", "grey80")) +
    scale_color_manual(values = c("grey0", "grey0")) +  # Set the point colors to gray
    theme_bw() + ggtitle(title) + xlab('') + ylab('') +
     # theme(legend.position = "none") +
    Theme

  return(list(sum, meti_1, post, fig = fig))

}
```

```{r}
Data_3 %>% 
  select(Competent_1, Intelligent_1, Educated_1, Professional_1, Experienced_1, Qualified_1
         , Sincere_1, Honest_1, Just_1, Fair_1 
         , Moral_1, Ethical_1, Responsible_1, Considerate_1) %>% 
  alpha()

Data_3 %>% 
  select(Competent_1, Intelligent_1, Educated_1, Professional_1, Experienced_1, Qualified_1
         ) %>% 
  alpha()

Data_3 %>% 
  select(
        Sincere_1, Honest_1, Just_1, Fair_1 
         ) %>% 
  alpha()

Data_3 %>% 
  select( 
        Moral_1, Ethical_1, Responsible_1, Considerate_1) %>% 
  alpha()

apa.cor.table(Data_3 %>% select(METI_1, Expertise_1, Integrity_1, Benevolance_1))
```



```{r, warning=FALSE, message=FALSE}
two_way_data_METI <- long_data(METI_1, METI_2)
two_way_data_Expertise <- long_data(Expertise_1, Expertise_2)
two_way_data_Integrity <- long_data(Integrity_1, Integrity_2)
two_way_data_Benevolence <- long_data(Benevolance_1, Benevolance_2)
```

## METI 

```{r, warning=FALSE, message=FALSE}
two_way_meti_1 <- two_way_analysis_order(two_way_data_METI, 1, title = 'METI')

```

### Answer IDK Know

```{r, warning=FALSE, message=FALSE}
two_way_data_METI %>% 
   filter(measure_time == 'First') %>% 
    group_by(Answer) %>% 
    summarise(round(mean_cl_normal(measure), 2)
               , N = length(measure))
```

### doc_lay: Dr Lay

```{r, warning=FALSE, message=FALSE}
two_way_data_METI %>% 
   filter(measure_time == 'First') %>% 
    group_by(doc_lay) %>% 
    summarise(round(mean_cl_normal(measure), 2)
               , N = length(measure))
```


## Expertise

```{r, warning=FALSE, message=FALSE}
two_way_expertise_1 <- two_way_analysis_order(two_way_data_Expertise, 1, title = 'Expertise')
```


### Answer IDK Know

```{r, warning=FALSE, message=FALSE}
two_way_data_Expertise %>% 
   filter(measure_time == 'First') %>% 
    group_by(Answer) %>% 
    summarise(round(mean_cl_normal(measure), 2)
               , N = length(measure))
```

### doc_lay: Dr Lay

```{r, warning=FALSE, message=FALSE}
two_way_data_Expertise %>% 
   filter(measure_time == 'First') %>% 
    group_by(doc_lay) %>% 
    summarise(round(mean_cl_normal(measure), 2)
              , N = length(measure))
```

## Integrity

```{r, warning=FALSE, message=FALSE}
two_way_integrity_1 <- two_way_analysis_order(two_way_data_Integrity, 1, title = 'Integrity')
```

### Answer: IDK Know

```{r, warning=FALSE, message=FALSE}
two_way_data_Integrity %>% 
   filter(measure_time == 'First') %>% 
    group_by(Answer) %>% 
    summarise(round(mean_cl_normal(measure), 2)
               , N = length(measure))
```

### doc_lay: Dr Lay

```{r, warning=FALSE, message=FALSE}
two_way_data_Integrity %>% 
   filter(measure_time == 'First') %>% 
    group_by(doc_lay) %>% 
    summarise(round(mean_cl_normal(measure), 2)
              , N = length(measure))
```


## Benevolence

```{r, warning=FALSE, message=FALSE}
two_way_benevolence_1 <- two_way_analysis_order(two_way_data_Benevolence, 1, title = 'Benevolence')
```

### Answer: IDK Know

```{r, warning=FALSE, message=FALSE}
two_way_data_Benevolence %>% 
   filter(measure_time == 'First') %>% 
    group_by(Answer) %>% 
    summarise(round(mean_cl_normal(measure), 2)
               , N = length(measure))
```

### doc_lay: Dr lay

```{r, warning=FALSE, message=FALSE}
two_way_data_Benevolence %>% 
   filter(measure_time == 'First') %>% 
    group_by(doc_lay) %>% 
    summarise(round(mean_cl_normal(measure), 2)
               , N = length(measure))
```


## Figure
```{r, warning=FALSE, message=FALSE}
all_1 <- (two_way_meti_1[4][[1]] + theme(legend.position="none") +
            two_way_expertise_1[4][[1]] +
            two_way_integrity_1[4][[1]] + theme(legend.position="none") +
            two_way_benevolence_1[4][[1]] + theme(legend.position="none"))

```


# Third way analysis

```{r, warning=FALSE, message=FALSE}
creating_long_data <- function(dv_1, dv_2, gap, type){
  
  first_meti <- Data_3 %>% 
  select(Q1, full_condition, measure = {{dv_1}}, Complaience, {{gap}}) %>% 
  mutate(who_IDK = if_else(grepl('DK', full_condition) == TRUE, 'Physician', 'Lay')
         , position_IDK = case_when(
          
            (grepl('DKup', full_condition) == TRUE |
               grepl('Knowdown', full_condition) == TRUE |
               grepl('KnowDown', full_condition) == TRUE) ~ 'First'
            , T ~ 'Second'
        )
         , answer = if_else(position_IDK == 'First', 'IDK', 'Know')
         , expertise = if_else(grepl('up', full_condition) == TRUE, 'Physician', 'Lay')
         , IDK_minus_Know = {{gap}}
         , type = type
         , Order = 'First') %>% 
    select(-{{gap}})

  second_meti <- Data_3 %>% 
    select(Q1, full_condition, measure = {{dv_2}}, Complaience, {{gap}}) %>% 
    mutate(who_IDK = if_else(grepl('DK', full_condition) == TRUE, 'Physician', 'Lay')
           , position_IDK = case_when(
          
            (grepl('DKup', full_condition) == TRUE | grepl('Knowdown', full_condition) == TRUE
              | grepl('KnowDown', full_condition) == TRUE) ~ 'First'
            , T ~ 'Second'
        )
           , answer = if_else(position_IDK == 'First', 'Know', 'IDK')
           , expertise = if_else(grepl('up', full_condition) == TRUE, 'Lay', 'Physician')
           , IDK_minus_Know = {{gap}}
           , type = type
           , Order = 'Second') %>% 
    select(-{{gap}})

  full_meti <- rbind(first_meti, second_meti)

  return(full_meti)
  
}




third_way_analysis <- function(data, title){
  
  new_data <- data %>% 
      select(who_IDK, position_IDK, answer, Q1, measure) %>% 
      mutate(dv_post = paste0(who_IDK, '_', position_IDK, '_', answer))
  
  
  sum <- new_data %>% 
    group_by(who_IDK, position_IDK, answer) %>% 
    summarise(round(mean_cl_normal(measure), 2)
              , N = length(measure))
  
  meti_1 <- ezANOVA(new_data
                    , wid     = Q1
                    , between = .(who_IDK, position_IDK)
                    , within  = .(answer)
                    , dv      = measure
                    , type    = 3
                    , white.adjust = FALSE)
  
  post <- pairwise.t.test(new_data$measure, new_data$dv_post, p.adjust.method = 'bonferroni')
  
  fig <-    new_data %>% 
  ggplot(aes(x = who_IDK, y = measure, fill = position_IDK)) +
   stat_summary(fun.data = "mean_cl_normal", geom = "errorbar"
                , color = "black", width = 0.2
                , linewidth = 1, position = position_dodge(0.9)) +
    stat_summary(fun = mean, geom = "bar"
                 , alpha = 0.2, position = position_dodge(0.9)) +
    facet_wrap(~answer) +
    theme_bw() +
    ggtitle(title) +
    Theme
  
  return(list(sum, meti_1, post, fig))

}



two_way_analysis_for_delta <- function(dv, title) {
  
  new_data <- Data_3 %>% 
    mutate(measure = {{dv}}) %>% 
    select(who_IDK, position_IDK, Q1, measure) %>% 
    mutate(dv_post = paste0(who_IDK, '_', position_IDK))
  
  sum <- new_data %>% 
    group_by(who_IDK, position_IDK) %>% 
    summarise(round(mean_cl_normal(measure), 2)
              , N = length(measure))
  
  meti_1 <- ezANOVA(new_data
                    , wid     = Q1
                    , between = .(who_IDK, position_IDK)
                    , dv      = measure
                    , type    = 3
                    , white.adjust = FALSE)
  
  post <- pairwise.t.test(new_data$measure, new_data$dv_post, p.adjust.method = 'bonferroni') # bonferroni

  fig <- new_data %>% 
    mutate(`IDK reply order` = if_else(position_IDK == 'First', 'First', 'Second')
           , who_IDK = if_else(who_IDK == 'Dr', 'Physician', 'Layperson')) %>% 
    ggplot(aes(x = who_IDK, y = measure, fill = `IDK reply order` )) + 
      stat_summary(fun = mean, geom = "bar", alpha = 0.8, position = position_dodge(0.9)
                   ) +
      geom_point(aes(color = `IDK reply order`) 
                 , size = 1, alpha = 0.2
                 , position = position_jitterdodge(jitter.width    = 0.2
                                                   , jitter.height = 0
                                                   , dodge.width   = 0.9)
                 ) +
      stat_summary(fun.data = "mean_cl_normal", geom = "errorbar"
                   , color = "black", width = 0.1, linewidth = 2
                   , position = position_dodge(0.9)
                   ) +
      scale_color_manual(values = c("grey0", "grey0")) +  # Set the point colors to gray
      scale_fill_manual(values  =  c("grey30", "grey80")) +
    coord_cartesian(ylim = c(-6, 6))  + 
    scale_y_continuous(breaks = seq(-6, 6, by = 2))  +
      theme_bw() + xlab('') + ylab('') + ggtitle(title) +
      # theme(legend.position = "none") +
      Theme
  
  return(list(sum, meti_1, post, fig = fig))
  
}



two_way_within_anova_whoIDk <- function(data, met, type) {

  title <- type
  # 
  # STAS <- data %>%
  #   group_by(who_IDK) %>%
  #   summarise(round(mean_cl_normal(IDK_minus_Know), 2)
  #          , N = length(IDK_minus_Know))

    post <- indttest(data$IDK_minus_Know, data %>% pull({{met}})) # bonferroni
    t_val <- post$Model_summary
    STAS <- post$Descriptive_statistics

  FG <- data %>%
    ggplot(aes(x = {{met}}, y = IDK_minus_Know )) + 
      stat_summary(fun = mean, geom = "bar", alpha = 0.8, position = position_dodge(0.9)
                   ) +
      geom_point(aes( color = {{met}})
                  , size = 1, alpha = 0.2
                 , position = position_jitterdodge(jitter.width    = 0.2
                                                   , jitter.height = 0
                                                   , dodge.width   = 0.9)
                 ) +
      stat_summary(fun.data = "mean_cl_normal", geom = "errorbar"
                   , color = "black", width = 0.1, linewidth = 2
                   , position = position_dodge(0.9)
                   ) +
      scale_color_manual(values = c("grey0", "grey0")) +  # Set the point colors to gray
      scale_fill_manual(values  =  c("grey30", "grey80")) +
      coord_cartesian(ylim = c(-6, 6))  + 
    scale_y_continuous(breaks = seq(-6, 6, by = 2))  +
      theme_bw() + xlab('') + ylab('') + ggtitle(title) + 
      Theme +
          theme(legend.position = "none"
            , title = element_text(vjust = 20)
            ) 

return(list(t_val, fig = FG))


}


two_way_within_anova_position <- function(data, met, type) {

  title <- type
  # 
  # STAS <- data %>%
  #   group_by(who_IDK) %>%
  #   summarise(round(mean_cl_normal(IDK_minus_Know), 2)
  #          , N = length(IDK_minus_Know))

    post <- indttest(data$IDK_minus_Know, data %>% pull({{met}})) # bonferroni
    t_val <- post$Model_summary
    STAS <- post$Descriptive_statistics

  FG <- data %>%
    ggplot(aes(x = {{met}}, y = IDK_minus_Know )) + 
      stat_summary(fun = mean, geom = "bar", alpha = 0.8, position = position_dodge(0.9)
                   ) +
      geom_point(aes( color = {{met}})
                  , size = 1, alpha = 0.2
                 , position = position_jitterdodge(jitter.width    = 0.2
                                                   , jitter.height = 0
                                                   , dodge.width   = 0.9)
                 ) +
      stat_summary(fun.data = "mean_cl_normal", geom = "errorbar"
                   , color = "black", width = 0.1, linewidth = 2
                   , position = position_dodge(0.9)
                   ) +
      scale_color_manual(values = c("grey0", "grey0")) +  # Set the point colors to gray
      scale_fill_manual(values  =  c("grey30", "grey80")) +
      coord_cartesian(ylim = c(-6, 6))  + 
    scale_y_continuous(breaks = seq(-6, 6, by = 2))  +
      theme_bw() + xlab('') + ylab('') + ggtitle(title) + 
      Theme +
          theme(legend.position = "none"
            , title = element_text(vjust = 20)
            ) 

return(list(t_val, fig = FG))


}

one_sample_correc <- function(data, identity, position = NULL, interaction_type) {

  if (interaction_type == 'third') {

       n_comparisons = 4
       adjust_p <- (0.05 / n_comparisons)

      model <- t.test(data[Data_3$who_IDK == identity & Data_3$position_IDK == position], mu = 0)
        size_dr = effectsize(model)
 #        p <-
 # rstatix::t_test(formula = {{data}} ~ 1, mu = 0, data = Data_3[Data_3$who_IDK == identity, ])
 # rstatix::adjust_pvalue(method = "bonferroni")


  } else {

     n_comparisons = 2
      adjust_p <- (0.05 / n_comparisons)

      model <- t.test(data[Data_3$who_IDK == identity], mu = 0)
    size_dr = effectsize(model)

      # p <- rstatix::t_test(formula = data[Data_3$who_IDK == identity] ~ 1, mu = 0, data = data)
 # rstatix::adjust_pvalue(method = "bonferroni")


  }

  critical_p <- if_else(model$p.value < adjust_p, 'significant with adjustment', 'not significant')

  return(list(model = model, size_dr, critical_p))
}




third_way_interaction_order_comparison <- function(data, type, corec, n_comparisons){

  comparison <- function(expertise, answer) {
    
    lev_test = var.test(data$measure[data$type == type &
                                                  data$expertise == expertise &
                                                  data$answer == answer] ~
                     data$Order[data$type == type & 
                                            data$expertise == expertise & 
                                            data$answer == answer])
    
    var_equal <- ifelse(lev_test$p.value > 0.05, TRUE, FALSE)
    
    t_test = t.test(data$measure[data$type == type &
                                                  data$expertise == expertise &
                                                  data$answer == answer] ~
                     data$Order[data$type == type & 
                                            data$expertise == expertise & 
                                            data$answer == answer]
                    , var.equal = var_equal)
    
    return(t_test)
    
  }
  
  MTEI_PHY_IDK  <- comparison(expertise = 'Physician', answer = 'IDK')
  MTEI_PHY_Know <- comparison(expertise = 'Physician', answer = 'Know')
  MTEI_Lay_IDK  <- comparison(expertise = 'Lay', answer = 'IDK')
  MTEI_Lay_Know <- comparison(expertise = 'Lay', answer = 'Know')
    
  MTEI_PHY_IDK_text <- paste0(round(MTEI_PHY_IDK$statistic, 2)
                          , '(', round(MTEI_PHY_IDK$parameter, 2),') '
                          , round(effectsize(MTEI_PHY_IDK)$d, 2))
  MTEI_PHY_Know_text <- paste0(round(MTEI_PHY_Know$statistic, 2)
                          , '(', round(MTEI_PHY_Know$parameter, 2),') '
                          , round(effectsize(MTEI_PHY_Know)$d, 2))
  MTEI_Lay_IDK_text <- paste0(round(MTEI_Lay_IDK$statistic, 2)
                          , '(', round(MTEI_Lay_IDK$parameter, 2),') '
                          , round(effectsize(MTEI_Lay_IDK)$d, 2))
  MTEI_Lay_Know_text <- paste0(round(MTEI_Lay_Know$statistic, 2)
                          , '(', round(MTEI_Lay_Know$parameter, 2),') '
                          , round(effectsize(MTEI_Lay_Know)$d, 2))

  models_list <- data.frame(model_name = c('MTEI_PHY_IDK'
                                      , 'MTEI_PHY_Know'
                                      , 'MTEI_Lay_IDK'
                                      , 'MTEI_Lay_Know')
                            , model_results = c(MTEI_PHY_IDK_text
                                      , MTEI_PHY_Know_text
                                      , MTEI_Lay_IDK_text
                                      , MTEI_Lay_Know_text)
  )
                            
  if(n_comparisons > 0) {

    ans <- p.adjust(c(MTEI_PHY_IDK$p.value
                      , MTEI_PHY_Know$p.value
                      , MTEI_Lay_IDK$p.value
                      , MTEI_Lay_Know$p.value
                      , rep(0.99, n_comparisons))
                    , method = corec) # bonferroni
    
  } else {

    ans <- p.adjust(c(MTEI_PHY_IDK$p.value
                      , MTEI_PHY_Know$p.value
                      , MTEI_Lay_IDK$p.value
                      , MTEI_Lay_Know$p.value)
                    , method = corec) # bonferroni
  }

  ans <- ans[1:4] %>% round(3)

  return(list(models_list, ans))

}



BETWEEN <- function(data, type){
  
  title <- type

  sum_data_1 <- data %>% 
    group_by(Q1, who_IDK, position_IDK) %>% 
    summarise(M = mean(measure)) %>% 
    mutate(dv_post = paste(who_IDK, position_IDK))
  
  sum_data_2 <- sum_data_1 %>% 
    group_by(who_IDK, position_IDK) %>% 
    summarise(mean_cl_normal(M)) 
    
  post <- pairwise.t.test(sum_data_1$M, sum_data_1$dv_post, p.adjust.method = 'bonferroni')

  fig <- sum_data_1 %>%
    mutate(who_IDK = if_else(who_IDK == 'Lay', 'Layperson', 'Physician')) %>%
    ggplot(aes(x = who_IDK, y = M, fill = position_IDK)) +
        stat_summary(fun = mean, geom = "bar",  position = position_dodge(0.9), alpha = 0.8) +
geom_point(aes(color = position_IDK)
               , size = 1
               , position = position_jitterdodge(jitter.width = 0.2
                                                 , jitter.height = 0)
               ) + 
   stat_summary(fun.data = "mean_cl_normal", geom = "errorbar"
                , color = "black", width = 0.4
                , linewidth = 2, position = position_dodge(0.9)
                ) +
    
    scale_fill_manual(values =  c("grey30", "grey80")) +
    scale_color_manual(values = c("grey0", "grey0")) +  # Set the point colors to gray
    theme_bw() + ggtitle(title) + xlab('') + ylab('') +
     # theme(legend.position = "none") +
    Theme

  return(list(sum_data = sum_data_2, post = post, fig = fig))
  
  
  
}

pair_third <- function(data, the_answer, the_expertise, answer_2, expertise_2) {
  
  
  m <- t.test(meti %>% filter(answer == the_answer & expertise == the_expertise & Order == 'First') %>% pull(measure)
       , meti %>% filter(answer != the_answer & expertise != the_expertise & Order == 'Second')%>% pull(measure), paired = TRUE)
  ef <- cohens_d(m, paired = T)
  p <- p.adjust(c(m$p.value, rep(0.5, 15)), method = "bonferroni")
  
  return(list(model = m, effect_size = ef, p_adj = round(p[1], 3)))
  
}

who_IDK_answer <- function(data, who_IDK) {
  
  Stat <- data %>% 
    group_by(who_IDK, answer) %>% 
    summarise(round(mean_cl_normal(measure), 2))

  M <- t.test(measure ~ answer, data %>% filter(who_IDK == who_IDK) %>% arrange(Q1), paired = T)
  ef <- effectsize(M)
  p <- p.adjust(c(M$p.value, rep(0.4, 3)), method = 'bonferroni')
  
  return(list(Stat = Stat, Model = M, effect_size = ef, p_adj = p[1]))
  
}

position_IDK_answer <- function(data, position_IDK) {
  
  Stat <- data %>% 
    group_by(position_IDK, answer) %>% 
    summarise(round(mean_cl_normal(measure), 2))

  M <- t.test(measure ~ answer, data %>% filter(position_IDK == position_IDK) %>% arrange(Q1), paired = T)
  ef <- effectsize(M)
  p <- p.adjust(c(M$p.value, rep(0.4, 3)), method = 'bonferroni')
  
  return(list(Stat = Stat, Model = M, effect_size = ef, p_adj = p[1]))
  
}
```

```{r, warning=FALSE, message=FALSE}
meti        <- creating_long_data(METI_1, METI_2, idk_minus_know_meti, type = 'METI') 
expertise   <- creating_long_data(Expertise_1, Expertise_2, idk_minus_know_Expertise, type = 'Expertise')
integrity   <- creating_long_data(Integrity_1, Integrity_2, idk_minus_know_Integrity, type = 'Integrity')
benevolence <- creating_long_data(Benevolance_1, Benevolance_2, idk_minus_know_Benevolance, type = 'Benevolence')

full_data_long <- rbind(meti, expertise, integrity, benevolence)


```

## METI
```{r}
third_way_analysis(meti, 'METI')
```

### main effect

```{r, warning=FALSE, message=FALSE}

full_data_long %>% 
  filter(type == 'METI') %>% 
  group_by(who_IDK) %>% 
  summarise(round(mean_cl_normal(measure), 2),
            N = length(measure))

```

```{r, warning=FALSE, message=FALSE}

full_data_long %>% 
  filter(type == 'METI') %>% 
  group_by(position_IDK) %>% 
  summarise(round(mean_cl_normal(measure), 2),
            N = length(measure))

```

```{r, warning=FALSE, message=FALSE}

full_data_long %>% 
  filter(type == 'METI') %>% 
  group_by(answer) %>% 
  summarise(round(mean_cl_normal(measure), 2),
            N = length(measure))

```


### who_IDK:position_IDK
```{r}
BETWEEN(meti, type = 'METI')
```

### who_IDK:answer
```{r}
who_IDK_answer(meti, 'Physician')

who_IDK_answer(meti, 'Lay')
```


### position_IDK:answer 

```{r, warning=FALSE, message=FALSE}
position_IDK_answer(meti, 'First')

position_IDK_answer(meti, 'Second')
```

### third way interaction


```{r}
pair_third(meti, 'IDK', 'Physician')
pair_third(meti, 'Know', 'Physician')
pair_third(meti, 'IDK', 'Lay')
pair_third(meti, 'Know', 'Lay')

meti %>% 
  mutate(grop_ing = as.factor(case_when(
    
    (answer == 'IDK' & expertise == 'Lay' & Order == 'First') | (answer == 'Know' & expertise == 'Physician' & Order == 'Second') ~ 1
    , (answer == 'IDK' & expertise == 'Physician' & Order == 'First') | (answer == 'Know' & expertise == 'Lay' & Order == 'Second') ~ 2
    , (answer == 'Know' & expertise == 'Lay' & Order == 'First') | (answer == 'IDK' & expertise == 'Physician' & Order == 'Second') ~ 3
    , T ~ 4
    
  ))) %>% 
  
  mutate(`Source's reply` = if_else(answer == 'IDK', answer, 'Specific advice')
         , `Source's proffesionality` = expertise) %>% 
    ggplot(aes(x =  Order, y = measure, fill = `Source's reply` )) + 
      stat_summary(fun = mean, geom = "bar", alpha = 0.8, position = position_dodge(0.9)
                   ) +
      geom_point( 
                  size = 1, alpha = 0.2
                 , position = position_jitterdodge(jitter.width    = 0.2
                                                   , jitter.height = 0
                                                   , dodge.width   = 0.9)
                 ) +
      stat_summary(fun.data = "mean_cl_normal", geom = "errorbar"
                   , color = "black", width = 0.1, linewidth = 2
                   , position = position_dodge(0.9)
                   ) +
facet_grid( ~ grop_ing) + 
  scale_fill_manual(values  =  c("grey30", "grey80")) +
    coord_cartesian(ylim = c(1, 7))  + 
    scale_y_continuous(breaks = seq(1, 7, by = 1))  +
      theme_bw() + xlab('') + ylab('') +
      # theme(legend.position = "none") +
      Theme
```

## Expertise

```{r}
third_way_analysis(expertise, 'Expertise')
```

### main effect

```{r, warning=FALSE, message=FALSE}

full_data_long %>% 
  filter(type == 'Expertise') %>% 
  group_by(who_IDK) %>% 
  summarise(round(mean_cl_normal(measure), 2),
            N = length(measure))

```

```{r, warning=FALSE, message=FALSE}

full_data_long %>% 
  filter(type == 'Expertise') %>% 
  group_by(position_IDK) %>% 
  summarise(round(mean_cl_normal(measure), 2),
            N = length(measure))

```

```{r, warning=FALSE, message=FALSE}

full_data_long %>% 
  filter(type == 'Expertise') %>% 
  group_by(answer) %>% 
  summarise(round(mean_cl_normal(measure), 2),
            N = length(measure))

```


### who_IDK:position_IDK
```{r}
BETWEEN(expertise, type = 'Expertise')
```

### who_IDK:answer
```{r}
who_IDK_answer(expertise, 'Physician')

who_IDK_answer(expertise, 'Lay')
```


### position_IDK:answer 

```{r, warning=FALSE, message=FALSE}
position_IDK_answer(expertise, 'First')

position_IDK_answer(expertise, 'Second')
```

### third way interaction


```{r}
pair_third(expertise, 'IDK', 'Physician')
pair_third(expertise, 'Know', 'Physician')
pair_third(expertise, 'IDK', 'Lay')
pair_third(expertise, 'Know', 'Lay')

expertise %>% 
  mutate(grop_ing = as.factor(case_when(
    
    (answer == 'IDK' & expertise == 'Lay' & Order == 'First') | (answer == 'Know' & expertise == 'Physician' & Order == 'Second') ~ 1
    , (answer == 'IDK' & expertise == 'Physician' & Order == 'First') | (answer == 'Know' & expertise == 'Lay' & Order == 'Second') ~ 2
    , (answer == 'Know' & expertise == 'Lay' & Order == 'First') | (answer == 'IDK' & expertise == 'Physician' & Order == 'Second') ~ 3
    , T ~ 4
    
  ))) %>% 
  
  mutate(`Source's reply` = if_else(answer == 'IDK', answer, 'Specific advice')
         , `Source's proffesionality` = expertise) %>% 
    ggplot(aes(x =  Order, y = measure, fill = `Source's reply` )) + 
      stat_summary(fun = mean, geom = "bar", alpha = 0.8, position = position_dodge(0.9)
                   ) +
      geom_point( 
                  size = 1, alpha = 0.2
                 , position = position_jitterdodge(jitter.width    = 0.2
                                                   , jitter.height = 0
                                                   , dodge.width   = 0.9)
                 ) +
      stat_summary(fun.data = "mean_cl_normal", geom = "errorbar"
                   , color = "black", width = 0.1, linewidth = 2
                   , position = position_dodge(0.9)
                   ) +
facet_grid( ~ grop_ing) + 
  scale_fill_manual(values  =  c("grey30", "grey80")) +
    coord_cartesian(ylim = c(1, 7))  + 
    scale_y_continuous(breaks = seq(1, 7, by = 1))  +
      theme_bw() + xlab('') + ylab('') +
      # theme(legend.position = "none") +
      Theme
```

## Integrity

```{r}
third_way_analysis(integrity, 'Integrity')
```

### main effect

```{r, warning=FALSE, message=FALSE}

full_data_long %>% 
  filter(type == 'Integrity') %>% 
  group_by(who_IDK) %>% 
  summarise(round(mean_cl_normal(measure), 2),
            N = length(measure))

```

```{r, warning=FALSE, message=FALSE}

full_data_long %>% 
  filter(type == 'Integrity') %>% 
  group_by(position_IDK) %>% 
  summarise(round(mean_cl_normal(measure), 2),
            N = length(measure))

```

```{r, warning=FALSE, message=FALSE}

full_data_long %>% 
  filter(type == 'Integrity') %>% 
  group_by(answer) %>% 
  summarise(round(mean_cl_normal(measure), 2),
            N = length(measure))

```


### who_IDK:position_IDK
```{r}
BETWEEN(integrity, type = 'Integrity')
```

### who_IDK:answer
```{r}
who_IDK_answer(integrity, 'Physician')

who_IDK_answer(integrity, 'Lay')
```


### position_IDK:answer 

```{r, warning=FALSE, message=FALSE}
position_IDK_answer(integrity, 'First')

position_IDK_answer(integrity, 'Second')
```

### third way interaction


```{r}
pair_third(integrity, 'IDK', 'Physician')
pair_third(integrity, 'Know', 'Physician')
pair_third(integrity, 'IDK', 'Lay')
pair_third(integrity, 'Know', 'Lay')

integrity %>% 
  mutate(grop_ing = as.factor(case_when(
    
    (answer == 'IDK' & expertise == 'Lay' & Order == 'First') | (answer == 'Know' & expertise == 'Physician' & Order == 'Second') ~ 1
    , (answer == 'IDK' & expertise == 'Physician' & Order == 'First') | (answer == 'Know' & expertise == 'Lay' & Order == 'Second') ~ 2
    , (answer == 'Know' & expertise == 'Lay' & Order == 'First') | (answer == 'IDK' & expertise == 'Physician' & Order == 'Second') ~ 3
    , T ~ 4
    
  ))) %>% 
  
  mutate(`Source's reply` = if_else(answer == 'IDK', answer, 'Specific advice')
         , `Source's proffesionality` = expertise) %>% 
    ggplot(aes(x =  Order, y = measure, fill = `Source's reply` )) + 
      stat_summary(fun = mean, geom = "bar", alpha = 0.8, position = position_dodge(0.9)
                   ) +
      geom_point( 
                  size = 1, alpha = 0.2
                 , position = position_jitterdodge(jitter.width    = 0.2
                                                   , jitter.height = 0
                                                   , dodge.width   = 0.9)
                 ) +
      stat_summary(fun.data = "mean_cl_normal", geom = "errorbar"
                   , color = "black", width = 0.1, linewidth = 2
                   , position = position_dodge(0.9)
                   ) +
facet_grid( ~ grop_ing) + 
  scale_fill_manual(values  =  c("grey30", "grey80")) +
    coord_cartesian(ylim = c(1, 7))  + 
    scale_y_continuous(breaks = seq(1, 7, by = 1))  +
      theme_bw() + xlab('') + ylab('') +
      # theme(legend.position = "none") +
      Theme
```

## Benevolence

```{r}
third_way_analysis(benevolence, 'Benevolence')
```

### main effect

```{r, warning=FALSE, message=FALSE}

full_data_long %>% 
  filter(type == 'Benevolence') %>% 
  group_by(who_IDK) %>% 
  summarise(round(mean_cl_normal(measure), 2),
            N = length(measure))

```

```{r, warning=FALSE, message=FALSE}

full_data_long %>% 
  filter(type == 'Benevolence') %>% 
  group_by(position_IDK) %>% 
  summarise(round(mean_cl_normal(measure), 2),
            N = length(measure))

```

```{r, warning=FALSE, message=FALSE}

full_data_long %>% 
  filter(type == 'Benevolence') %>% 
  group_by(answer) %>% 
  summarise(round(mean_cl_normal(measure), 2),
            N = length(measure))

```


### who_IDK:position_IDK
```{r}
BETWEEN(benevolence, type = 'Benevolence')
```

### who_IDK:answer
```{r}
who_IDK_answer(benevolence, 'Physician')

who_IDK_answer(benevolence, 'Lay')
```


### position_IDK:answer 

```{r, warning=FALSE, message=FALSE}
position_IDK_answer(benevolence, 'First')

position_IDK_answer(benevolence, 'Second')
```

### third way interaction


```{r}
pair_third(benevolence, 'IDK', 'Physician')
pair_third(benevolence, 'Know', 'Physician')
pair_third(benevolence, 'IDK', 'Lay')
pair_third(benevolence, 'Know', 'Lay')

benevolence %>% 
  mutate(grop_ing = as.factor(case_when(
    
    (answer == 'IDK' & expertise == 'Lay' & Order == 'First') | (answer == 'Know' & expertise == 'Physician' & Order == 'Second') ~ 1
    , (answer == 'IDK' & expertise == 'Physician' & Order == 'First') | (answer == 'Know' & expertise == 'Lay' & Order == 'Second') ~ 2
    , (answer == 'Know' & expertise == 'Lay' & Order == 'First') | (answer == 'IDK' & expertise == 'Physician' & Order == 'Second') ~ 3
    , T ~ 4
    
  ))) %>% 
  
  mutate(`Source's reply` = if_else(answer == 'IDK', answer, 'Specific advice')
         , `Source's proffesionality` = expertise) %>% 
    ggplot(aes(x =  Order, y = measure, fill = `Source's reply` )) + 
      stat_summary(fun = mean, geom = "bar", alpha = 0.8, position = position_dodge(0.9)
                   ) +
      geom_point( 
                  size = 1, alpha = 0.2
                 , position = position_jitterdodge(jitter.width    = 0.2
                                                   , jitter.height = 0
                                                   , dodge.width   = 0.9)
                 ) +
      stat_summary(fun.data = "mean_cl_normal", geom = "errorbar"
                   , color = "black", width = 0.1, linewidth = 2
                   , position = position_dodge(0.9)
                   ) +
facet_grid( ~ grop_ing) + 
  scale_fill_manual(values  =  c("grey30", "grey80")) +
    coord_cartesian(ylim = c(1, 7))  + 
    scale_y_continuous(breaks = seq(1, 7, by = 1))  +
      theme_bw() + xlab('') + ylab('') +
      # theme(legend.position = "none") +
      Theme
```

## Compliance
### Cross Table
```{r, warning=FALSE, message=FALSE}
Data_3$Complaience_bin <- if_else(grepl('Dr', Data_3$Complaience), 'Dr', 
                                  if_else(Data_3$Complaience == 'Neither', Data_3$Complaience, 'Lay'))




CT( Data_3$Complaience_bin, Data_3$Dr_answer)

z <- 1.96
Data_3 %>% 
  mutate(Dr_answer = ifelse(Dr_answer == 'IDK', Dr_answer, 'Specific advice')) %>% 
  group_by(Dr_answer) %>% 
  summarise(i = table(Complaience_bin)
            , n = length(Complaience_bin)
            , p = round(100 * i / n, 2)) %>%
    ungroup() %>% 
  mutate(low = p - z * sqrt(p * (100 - p) / n)
         , high = p + z * sqrt(p * (100 - p) / n)) %>% 
  mutate(Complaience_bin = as.factor(c('Physician', 'Layperson', 'Neither', 'Physician', 'Layperson', 'Neither'))) %>% 
  mutate(Complaience_bin = fct_relevel(Complaience_bin, c('Physician', 'Layperson', 'Neither'))) %>% 
  ggplot(aes(x = Complaience_bin, y = p)) + 
  geom_col() + 
    geom_errorbar(aes(ymin = low, ymax = high), width = 0.15, size = 2) +
  facet_grid(~Dr_answer) + 
  theme_bw() + 
    theme(strip.text = element_text(size = 20)) +
  ylab('Percent adherence') + xlab("Source's reply")+
  Theme


```

### Logistic regression
```{r, warning=FALSE, message=FALSE}
log_data <- meti %>% 
  mutate(new_com = case_when (
    
    grepl('Dr', Complaience) == TRUE & grepl('Dr', who_IDK) == TRUE ~ 1
    , grepl('Dr', Complaience) == FALSE & grepl('Dr', who_IDK) == FALSE ~ 1
    , Complaience == 'Neither' ~ 2
    , T ~ 0
    
    )) %>% 
  
    filter(new_com < 2) %>% 
  distinct(who_IDK, position_IDK , Q1, new_com) %>% 
  left_join(Data_3[, c('Q1', 'Gender', 'Age')], by = 'Q1')

CT(log_data$Gender, log_data$new_com)
indttest(log_data$Age, log_data$new_com)

 regLog1 <- stats::glm(new_com ~ who_IDK * position_IDK + Gender + Age, family = binomial('logit'), data = log_data %>% filter(Gender != 'Prefer not to specify'))
 regLog1 %>% summary()
 # Performing a logistic regression
  ORCI    <- round(exp(cbind(Odds_Ratios = stats::coef(regLog1), stats::confint(regLog1))), 2)  # Calculation odds ratios and confidance intervales for the odds ratios

  cdiff           <- round(regLog1$null.deviance - regLog1$deviance, 2)  # Calculating the Chi square value of the model
  dfdiff          <- regLog1$df.null - regLog1$df.residual              # Calculating the degrees of freedom value of the model
  p               <- round(stats::pchisq(q = cdiff, df = dfdiff, lower.tail = FALSE), 100) # Calculating the p value of the model
  Nagelkerke      <- rcompanion::nagelkerke(fit = regLog1, null = NULL, restrictNobs = FALSE)  # Calculating the explained variance
  NagelkerkePrint <- paste0(100 * round(Nagelkerke$Pseudo.R.squared.for.model.vs.null[3], 4), "%") # Extracting the explained variance

  Hoslem          <- ResourceSelection::hoslem.test(x = regLog1$y
                                                    , y = fitted(regLog1)
                                                    , g = 10)  # Calculating the significance of the accuracy
  hoslemStatistic <- round(Hoslem$statistic, 2)
  hoslemP         <- round(Hoslem$p.value, 2)
  binaryCorrect   <- ifelse(regLog1$fitted.values > 0.5, 1, 0)                        # Creating a vector of 1 and 0 (by the probabilities of each ID to be 1, and the Classification value)
  Prediction      <- table(log_data %>% filter(Gender != 'Prefer not to specify') %>% pull(new_com), binaryCorrect)                                                    # Creating a table with the predicted values and the actual DV values
  Accuracy        <- paste0(round((Prediction[1, 1] + Prediction[2, 2]) / sum(Prediction) * 100, 2), "%")   # Calculating the Accuracy
  Sensitivity     <- paste0(round(Prediction[2, 2] / (Prediction[2, 2] + Prediction[1, 1]) * 100, 2), "%")  # Calculating the sensitivity
  Specificity     <- paste0(round(Prediction[1, 1] / (Prediction[1, 1] + Prediction[1, 2]) * 100, 2), "%")  # Calculating the specificity



```


